services:
  redis:
    image: redis:8.2.1-alpine
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--requirepass",
        "${REDIS_PASSWORD}",
      ]
    networks:
      - internal_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - redis_data:/data

  postgres:
    image: pgvector/pgvector:pg17-trixie
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5

  evolution:
    image: atendai/evolution-api:v2.2.3
    environment:
      AUTHENTICATION_API_KEY: ${EVOLUTION_API_KEY}
      DATABASE_PROVIDER: postgresql
      DATABASE_ENABLED: true
      DATABASE_CONNECTION_CLIENT_NAME: evolution_exchange
      DATABASE_CONNECTION_URI: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${EVOLUTION_DB_NAME}?schema=public"
      CACHE_REDIS_ENABLED: true
      CACHE_REDIS_URI: redis://default:${REDIS_PASSWORD}@redis:6379
      CACHE_REDIS_PREFIX_KEY: evolution
      CONFIG_SESSION_PHONE_VERSION: 2.3000.1027426813
      CHATWOOT_ENABLED: true
    volumes:
      - evolution_sessions:/app/.sessions
      - evolution_media:/app/.media
      - evolution_store:/evolution/store
      - evolution_instances:/evolution/instances
    networks:
      - internal_net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  n8n:
    image: n8nio/n8n:1.112.3
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}

      EXECUTIONS_MODE: queue
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}

      QUEUE_MODE: redis
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}

      N8N_HOST: ${N8N_HOST}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL}
      N8N_TRUSTED_PROXIES: 0.0.0.0/0
      WEBHOOK_URL: ${WEBHOOK_URL}
      GENERIC_TIMEZONE: America/Sao_Paulo
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_PUBLIC_API_DISABLED: "true"
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      N8N_RUNNERS_ENABLED: "true"
      N8N_BLOCK_ENV_ACCESS_IN_NODE: "false"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - internal_net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  chatwoot:
    image: chatwoot/chatwoot:v4.6.0
    command:
      ["bundle", "exec", "rails", "server", "-b", "0.0.0.0", "-p", "3000"]
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USERNAME: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${CHATWOOT_DB}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY_BASE: ${CHATWOOT_SECRET}
      FRONTEND_URL: https://chat.${DOMAIN}
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: "true"
      RAILS_SERVE_STATIC_FILES: "true"
      RAILS_MAX_THREADS: 5
      WEB_CONCURRENCY: 2
      INSTALLATION_ENV: docker
      DEFAULT_LOCALE: pt_BR
    volumes:
      - chatwoot_data:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - internal_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:3000/api || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 120s

  chatwoot-worker:
    image: chatwoot/chatwoot:v4.6.0
    command: bundle exec sidekiq
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USERNAME: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${CHATWOOT_DB}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY_BASE: ${CHATWOOT_SECRET}
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - internal_net
    restart: unless-stopped

  proxy:
    image: jc21/nginx-proxy-manager:2.12.6
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:81:81"
    volumes:
      - proxy_data:/data
      - proxy_letsencrypt:/etc/letsencrypt
    environment:
      DISABLE_IPV6: "true"
    networks:
      - internal_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:81 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  pgdata:
  evolution_sessions:
  evolution_media:
  evolution_store:
  evolution_instances:
  n8n_data:
  chatwoot_data:
  proxy_data:
  proxy_letsencrypt:
  redis_data:

networks:
  internal_net:
    driver: bridge
